services:
  # ----------------
  # Postgres
  # ----------------
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init_postgres.sql:/docker-entrypoint-initdb.d/init_postgres.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------
  # Инициатор данных
  # ----------------
  data_generation:
    image: python:3.9
    container_name: data_generation
    depends_on:
      - postgres
    restart: "no"
    volumes:
      - ./db/data_generation_postgres.py:/app/data_generation_postgres.py
    command: >
      sh -c "
      pip install --no-cache-dir psycopg2-binary faker && 
      python /app/data_generation_postgres.py
      "

  # ----------------
  # MySQL
  # ----------------
  mysql:
    image: mysql:8
    container_name: mysql_db
    environment:
      - MYSQL_ROOT_PASSWORD=mysql
      - MYSQL_DATABASE=mydb
      - MYSQL_USER=myuser
      - MYSQL_PASSWORD=myuserpwd
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init_mysql.sql:/docker-entrypoint-initdb.d/init_mysql.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------
  # Zookeeper
  # ----------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # ----------------
  # Kafka
  # ----------------
  kafka:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # ----------------
  # Spark Master
  # ----------------
  spark:
    build:
      context: ./spark/master
      dockerfile: Dockerfile
    container_name: spark_master
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "8081:8081"
    volumes:
      - ./scripts:/opt/spark_scripts
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------
  # Spark Worker
  # ----------------
  spark-worker:
    build:
      context: ./spark/worker
      dockerfile: Dockerfile
    container_name: spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on:
      spark:
        condition: service_healthy
    volumes:
      - ./scripts:/opt/spark_scripts

  # ----------------
  # Airflow INIT
  # ----------------
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow_init
    depends_on:
      - postgres
      - mysql
    # Этот контейнер отрабатывает миграции Airflow и создаёт подключения, пользователей, etc.
    entrypoint: /bin/bash
    command: >
      -c "
      echo '=== Initializing Airflow DB ===' &&
      airflow db init &&
      echo '=== Creating Airflow connections ===' &&
      /opt/airflow/scripts/init_airflow_connections.sh &&
      echo '=== Creating Admin user ===' &&
      airflow users create --username airflow --password airflow --firstname Airflow --lastname User --role Admin --email admin@example.com
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db:5432/airflowdb
      - AIRFLOW_UID=50000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins

  # ----------------
  # Airflow Webserver
  # ----------------
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db:5432/airflowdb
      - AIRFLOW_UID=50000
    command: >
      bash -c "
      echo '=== Starting Airflow Webserver ===' &&
      airflow webserver
      "
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins

  # ----------------
  # Airflow Scheduler
  # ----------------
  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db:5432/airflowdb
      - AIRFLOW_UID=50000
    command: >
      bash -c "
      echo '=== Starting Airflow Scheduler ===' &&
      airflow scheduler
      "
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins

volumes:
  postgres_data:
  mysql_data:
  airflow_logs:
  airflow_plugins:

networks:
  spark_network:
    driver: bridge